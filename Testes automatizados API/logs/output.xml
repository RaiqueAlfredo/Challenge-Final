<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.3 (Python 3.13.4 on win32)" generated="2025-07-01T21:31:07.329929" rpa="false" schemaversion="5">
<suite id="s1" name="Reservations Tests" source="C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Challenge Final\Testes automatizados API\tests\reservations_tests.robot">
<test id="s1-t1" name="RESERVATIONS-BE-009: Criar reserva com payload inválido" line="25">
<kw name="Iniciar sessão" owner="base" type="SETUP">
<kw name="Run Keyword If" owner="BuiltIn">
<arg>'${auth_token}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${headers}</arg>
<arg>Authorization=Bearer ${auth_token}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-07-01T21:31:10.026519" elapsed="0.000351"/>
</kw>
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-07-01T21:31:10.027190" level="INFO">Creating Session using : alias=Cinema App API, url=http://localhost:5000/api/v1, headers={'accept': 'application/json', 'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<arg>alias=${ALIAS_BASE}</arg>
<arg>url=${URL_BASE}</arg>
<arg>headers=${headers}</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-07-01T21:31:10.026992" elapsed="0.000367"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.025934" elapsed="0.001479"/>
</kw>
<kw name="Login usuário comum" owner="common">
<kw name="Payload login usuário comum" owner="common">
<kw name="Importar JSON static" owner="common">
<kw name="Get File" owner="OperatingSystem">
<msg time="2025-07-01T21:31:10.028293" level="INFO" html="true">Getting file '&lt;a href="file://C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Challenge Final\Testes automatizados API\support\fixtures\static\json_auth.json"&gt;C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Challenge Final\Testes automatizados API\support\fixtures\static\json_auth.json&lt;/a&gt;'.</msg>
<msg time="2025-07-01T21:31:10.028504" level="INFO">${arquivo} = {
    "user_login":{
        "email": "user@example.com",
        "password": "password123"
    },
    "admin_login":{
        "email": "admin@example.com",
        "password": "password123"
    },
  ...</msg>
<var>${arquivo}</var>
<arg>C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Challenge Final\\Testes automatizados API\\support\\common/../../support/fixtures/static/${nome_arquivo}</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2025-07-01T21:31:10.028156" elapsed="0.000371"/>
</kw>
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.028801" level="INFO">${data} = {'user_login': {'email': 'user@example.com', 'password': 'password123'}, 'admin_login': {'email': 'admin@example.com', 'password': 'password123'}, 'user_email_dup': {'email': 'user@example.com', 'pass...</msg>
<var>${data}</var>
<arg>json.loads('''${arquivo}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-07-01T21:31:10.028613" elapsed="0.000209"/>
</kw>
<return>
<value>${data}</value>
<status status="PASS" start="2025-07-01T21:31:10.028860" elapsed="0.000033"/>
</return>
<msg time="2025-07-01T21:31:10.028984" level="INFO">${json} = {'user_login': {'email': 'user@example.com', 'password': 'password123'}, 'admin_login': {'email': 'admin@example.com', 'password': 'password123'}, 'user_email_dup': {'email': 'user@example.com', 'pass...</msg>
<var>${json}</var>
<arg>json_auth.json</arg>
<status status="PASS" start="2025-07-01T21:31:10.027970" elapsed="0.001032"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.029369" level="INFO">${dados_login_user} = {'email': 'user@example.com', 'password': 'password123'}</msg>
<var>${dados_login_user}</var>
<arg>${json["user_login"]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-07-01T21:31:10.029082" elapsed="0.000305"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.029594" level="INFO">${dados_login_user} = {'email': 'user@example.com', 'password': 'password123'}</msg>
<arg>${dados_login_user}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2025-07-01T21:31:10.029474" elapsed="0.000148"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.027773" elapsed="0.001884"/>
</kw>
<kw name="POST endpoint /auth/Login" owner="authentication_keywords">
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-07-01T21:31:10.110881" level="INFO">POST Request : url=http://localhost:5000/api/v1/auth/login 
 path_url=/api/v1/auth/login 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate', 'accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '56'} 
 body=b'{"email": "user@example.com", "password": "password123"}' 
 </msg>
<msg time="2025-07-01T21:31:10.110983" level="INFO">POST Response : url=http://localhost:5000/api/v1/auth/login 
 status=200, reason=OK 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '303', 'ETag': 'W/"12f-p/b7+IMvnz0FV+wFAkJBRfoWMXM"', 'Date': 'Wed, 02 Jul 2025 00:31:10 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":true,"data":{"_id":"686467c06671646cb11ac3b0","name":"Regular User","email":"user@example.com","role":"user","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI"}} 
 </msg>
<msg time="2025-07-01T21:31:10.111083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<var>${resp}</var>
<arg>alias=${ALIAS_BASE}</arg>
<arg>url=/auth/login</arg>
<arg>json=&amp;{payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-07-01T21:31:10.029944" elapsed="0.081159"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.111561" level="INFO">Response: {'success': True, 'data': {'_id': '686467c06671646cb11ac3b0', 'name': 'Regular User', 'email': 'user@example.com', 'role': 'user', 'token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI'}}</msg>
<arg>Response: ${resp.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.111234" elapsed="0.000361"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.111801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<arg>${resp}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2025-07-01T21:31:10.111686" elapsed="0.000142"/>
</kw>
<arg>${dados_login_user}</arg>
<status status="PASS" start="2025-07-01T21:31:10.029746" elapsed="0.082121"/>
</kw>
<kw name="Validar se o login foi realizado com sucesso" owner="authentication_keywords">
<kw name="Should Be True" owner="BuiltIn">
<arg>${resp.json()["success"]}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-07-01T21:31:10.112139" elapsed="0.000256"/>
</kw>
<kw name="Should Not Be Empty" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.112952" level="INFO">Length is 171.</msg>
<arg>${resp.json()["data"]["token"]}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" start="2025-07-01T21:31:10.112475" elapsed="0.000507"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.113295" level="INFO">success: True</msg>
<arg>success: ${resp.json()["success"]}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.113059" elapsed="0.000403"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.113785" level="INFO">token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI</msg>
<arg>token: ${resp.json()["data"]["token"]}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.113550" elapsed="0.000264"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.111975" elapsed="0.001875"/>
</kw>
<kw name="Validar Status Code &quot;200&quot;" owner="common" source_name="Validar Status Code &quot;${statuscode}&quot;">
<kw name="Should Be True" owner="BuiltIn">
<arg>${resp.status_code} == ${statuscode}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-07-01T21:31:10.114125" elapsed="0.000454"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.114728" level="INFO">Status Code: 200</msg>
<arg>Status Code: ${statuscode}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.114657" elapsed="0.000098"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.113949" elapsed="0.000840"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.115097" level="INFO">${auth_token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI</msg>
<var>${auth_token}</var>
<arg>${resp.json()["data"]["token"]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-07-01T21:31:10.114855" elapsed="0.000260"/>
</kw>
<kw name="Set Global Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.115304" level="INFO">${auth_token} = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI</msg>
<arg>${auth_token}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" start="2025-07-01T21:31:10.115194" elapsed="0.000136"/>
</kw>
<kw name="Iniciar sessão" owner="base">
<kw name="Run Keyword If" owner="BuiltIn">
<kw name="Set To Dictionary" owner="Collections">
<arg>${headers}</arg>
<arg>Authorization=Bearer ${auth_token}</arg>
<doc>Adds the given ``key_value_pairs`` and/or ``items`` to the ``dictionary``.</doc>
<status status="PASS" start="2025-07-01T21:31:10.115883" elapsed="0.000129"/>
</kw>
<arg>'${auth_token}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${headers}</arg>
<arg>Authorization=Bearer ${auth_token}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" start="2025-07-01T21:31:10.115570" elapsed="0.000478"/>
</kw>
<kw name="Create Session" owner="RequestsLibrary">
<msg time="2025-07-01T21:31:10.116283" level="INFO">Creating Session using : alias=Cinema App API, url=http://localhost:5000/api/v1, headers={'accept': 'application/json', 'Content-Type': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<arg>alias=${ALIAS_BASE}</arg>
<arg>url=${URL_BASE}</arg>
<arg>headers=${headers}</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2025-07-01T21:31:10.116122" elapsed="0.000263"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.115417" elapsed="0.001013"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.027591" elapsed="0.088866"/>
</kw>
<kw name="Payload criar reserva com dados inválidos" owner="common">
<kw name="Importar JSON static" owner="common">
<kw name="Get File" owner="OperatingSystem">
<msg time="2025-07-01T21:31:10.117087" level="INFO" html="true">Getting file '&lt;a href="file://C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Challenge Final\Testes automatizados API\support\fixtures\static\json_reservation.json"&gt;C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Challenge Final\Testes automatizados API\support\fixtures\static\json_reservation.json&lt;/a&gt;'.</msg>
<msg time="2025-07-01T21:31:10.117320" level="INFO">${arquivo} = {
    "reserva_valido": {
        "session": "{{session_id}}",
        "seats": [{
            "row": "A",
            "number": 4,
            "type": "full"
        }],
        "paymentMethod": "cre...</msg>
<var>${arquivo}</var>
<arg>C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Challenge Final\\Testes automatizados API\\support\\common/../../support/fixtures/static/${nome_arquivo}</arg>
<doc>Returns the contents of a specified file.</doc>
<status status="PASS" start="2025-07-01T21:31:10.116982" elapsed="0.000360"/>
</kw>
<kw name="Evaluate" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.117593" level="INFO">${data} = {'reserva_valido': {'session': '{{session_id}}', 'seats': [{'row': 'A', 'number': 4, 'type': 'full'}], 'paymentMethod': 'credit_card'}, 'reserva_invalido': {'session': 'id-inexistente', 'seats': [{'ro...</msg>
<var>${data}</var>
<arg>json.loads('''${arquivo}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<status status="PASS" start="2025-07-01T21:31:10.117423" elapsed="0.000188"/>
</kw>
<return>
<value>${data}</value>
<status status="PASS" start="2025-07-01T21:31:10.117646" elapsed="0.000034"/>
</return>
<msg time="2025-07-01T21:31:10.117765" level="INFO">${json} = {'reserva_valido': {'session': '{{session_id}}', 'seats': [{'row': 'A', 'number': 4, 'type': 'full'}], 'paymentMethod': 'credit_card'}, 'reserva_invalido': {'session': 'id-inexistente', 'seats': [{'ro...</msg>
<var>${json}</var>
<arg>json_reservation.json</arg>
<status status="PASS" start="2025-07-01T21:31:10.116817" elapsed="0.000964"/>
</kw>
<kw name="Set Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.118109" level="INFO">${dados_reserva_inv} = {'session': 'id-inexistente', 'seats': [{'row': '', 'number': '', 'type': 'none'}], 'paymentMethod': 'tomorrow'}</msg>
<var>${dados_reserva_inv}</var>
<arg>${json["reserva_invalido"]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2025-07-01T21:31:10.117855" elapsed="0.000271"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.118302" level="INFO">${dados_reserva_inv} = {'session': 'id-inexistente', 'seats': [{'row': '', 'number': '', 'type': 'none'}], 'paymentMethod': 'tomorrow'}</msg>
<arg>${dados_reserva_inv}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2025-07-01T21:31:10.118205" elapsed="0.000122"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.116624" elapsed="0.001736"/>
</kw>
<kw name="POST endpoint /reservations com payload inválido" owner="reservations_keywords">
<kw name="POST On Session" owner="RequestsLibrary">
<msg time="2025-07-01T21:31:10.142889" level="INFO">POST Request : url=http://localhost:5000/api/v1/reservations 
 path_url=/api/v1/reservations 
 headers={'User-Agent': 'python-requests/2.32.3', 'Accept-Encoding': 'gzip, deflate', 'accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4NjQ2N2MwNjY3MTY0NmNiMTFhYzNiMCIsImlhdCI6MTc1MTQxNjI3MCwiZXhwIjoxNzUxNTAyNjcwfQ.ElPl1MPrr-Rmxpc9ZI1B7VKJLq8G5doaRIuNQkMJktI', 'Content-Length': '112'} 
 body=b'{"session": "id-inexistente", "seats": [{"row": "", "number": "", "type": "none"}], "paymentMethod": "tomorrow"}' 
 </msg>
<msg time="2025-07-01T21:31:10.143038" level="INFO">POST Response : url=http://localhost:5000/api/v1/reservations 
 status=400, reason=Bad Request 
 headers={'X-Powered-By': 'Express', 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '1850', 'ETag': 'W/"73a-Wp1ADIPIumtANlg2ppmPSdfsd2Y"', 'Date': 'Wed, 02 Jul 2025 00:31:10 GMT', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=5'} 
 body={"success":false,"message":"Resource not found","stack":"CastError: Cast to ObjectId failed for value \"id-inexistente\" (type string) at path \"_id\" for model \"Session\"\n    at SchemaObjectId.cast (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\schema\\objectId.js:251:11)\n    at SchemaType.applySetters (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\schemaType.js:1255:12)\n    at SchemaType.castForQuery (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\schemaType.js:1673:17)\n    at cast (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\cast.js:390:32)\n    at Query.cast (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:5055:12)\n    at Query._castConditions (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:2351:10)\n    at model.Query._findOne (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:2674:8)\n    at model.Query.exec (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:4604:80)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async exports.createReservation (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\src\\controllers\\reservationController.js:137:21)"} 
 </msg>
<msg time="2025-07-01T21:31:10.143138" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<var>${resp}</var>
<arg>alias=${ALIAS_BASE}</arg>
<arg>url=/reservations</arg>
<arg>json=&amp;{payload}</arg>
<arg>headers=${headers}</arg>
<arg>expected_status=${status_code_desejado}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" start="2025-07-01T21:31:10.118816" elapsed="0.024342"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.143619" level="INFO">Response: {'success': False, 'message': 'Resource not found', 'stack': 'CastError: Cast to ObjectId failed for value "id-inexistente" (type string) at path "_id" for model "Session"\n    at SchemaObjectId.cast (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\schema\\objectId.js:251:11)\n    at SchemaType.applySetters (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\schemaType.js:1255:12)\n    at SchemaType.castForQuery (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\schemaType.js:1673:17)\n    at cast (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\cast.js:390:32)\n    at Query.cast (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:5055:12)\n    at Query._castConditions (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:2351:10)\n    at model.Query._findOne (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:2674:8)\n    at model.Query.exec (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\node_modules\\mongoose\\lib\\query.js:4604:80)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async exports.createReservation (C:\\Users\\raiqu\\Desktop\\Nero\\Estágio\\Challenge Final\\Cinema App API\\cinema-challenge-back\\src\\controllers\\reservationController.js:137:21)'}</msg>
<arg>Response: ${resp.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.143273" elapsed="0.000388"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.143854" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<arg>${resp}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2025-07-01T21:31:10.143751" elapsed="0.000131"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.118551" elapsed="0.025370"/>
</kw>
<kw name="Validar Status Code &quot;400&quot;" owner="common" source_name="Validar Status Code &quot;${statuscode}&quot;">
<kw name="Should Be True" owner="BuiltIn">
<arg>${resp.status_code} == ${statuscode}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" start="2025-07-01T21:31:10.144310" elapsed="0.000495"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.144964" level="INFO">Status Code: 400</msg>
<arg>Status Code: ${statuscode}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.144889" elapsed="0.000102"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.144104" elapsed="0.000922"/>
</kw>
<kw name="Validar se retornar mensagem de erro indicando os problemas no payload" owner="reservations_keywords">
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${resp.json()["success"]}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-07-01T21:31:10.145372" elapsed="0.000305"/>
</kw>
<kw name="Should Be Equal" owner="BuiltIn">
<arg>${resp.json()["message"]}</arg>
<arg>Resource not found</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" start="2025-07-01T21:31:10.145761" elapsed="0.000263"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.146171" level="WARN">BUG CONFIRMADO: API retorna 'Resource not found' em vez de validar payload</msg>
<arg>BUG CONFIRMADO: API retorna 'Resource not found' em vez de validar payload</arg>
<arg>WARN</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.146105" elapsed="0.000209"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.146649" level="INFO">success: False</msg>
<arg>success: ${resp.json()["success"]}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.146398" elapsed="0.000280"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.146988" level="INFO">message: Resource not found</msg>
<arg>message: ${resp.json()["message"]}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.146751" elapsed="0.000265"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.147375" level="INFO">stack: CastError: Cast to ObjectId failed for value "id-inexistente" (type string) at path "_id" for model "Session"
    at SchemaObjectId.cast (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\schema\objectId.js:251:11)
    at SchemaType.applySetters (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\schemaType.js:1255:12)
    at SchemaType.castForQuery (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\schemaType.js:1673:17)
    at cast (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\cast.js:390:32)
    at Query.cast (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\query.js:5055:12)
    at Query._castConditions (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\query.js:2351:10)
    at model.Query._findOne (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\query.js:2674:8)
    at model.Query.exec (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\node_modules\mongoose\lib\query.js:4604:80)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async exports.createReservation (C:\Users\raiqu\Desktop\Nero\Estágio\Challenge Final\Cinema App API\cinema-challenge-back\src\controllers\reservationController.js:137:21)</msg>
<arg>stack: ${resp.json()["stack"]}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.147105" elapsed="0.000368"/>
</kw>
<kw name="Fail" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.147679" level="FAIL">BUG: API não valida payload corretamente - retorna 'Resource not found' em vez de 'Validation failed'</msg>
<arg>BUG: API não valida payload corretamente - retorna 'Resource not found' em vez de 'Validation failed'</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="FAIL" start="2025-07-01T21:31:10.147554" elapsed="0.000242">BUG: API não valida payload corretamente - retorna 'Resource not found' em vez de 'Validation failed'</status>
</kw>
<status status="FAIL" start="2025-07-01T21:31:10.145193" elapsed="0.002687">BUG: API não valida payload corretamente - retorna 'Resource not found' em vez de 'Validation failed'</status>
</kw>
<kw name="Finalizar sessão" owner="base" type="TEARDOWN">
<kw name="Delete All Sessions" owner="RequestsLibrary">
<msg time="2025-07-01T21:31:10.148381" level="INFO">Deleting All Sessions</msg>
<doc>Removes all the session objects</doc>
<status status="PASS" start="2025-07-01T21:31:10.148339" elapsed="0.000097"/>
</kw>
<kw name="Log" owner="BuiltIn">
<msg time="2025-07-01T21:31:10.148561" level="INFO">Sessões encerradas.</msg>
<arg>Sessões encerradas.</arg>
<doc>Logs the given message with the given level.</doc>
<status status="PASS" start="2025-07-01T21:31:10.148509" elapsed="0.000079"/>
</kw>
<status status="PASS" start="2025-07-01T21:31:10.148146" elapsed="0.000475"/>
</kw>
<tag>criar_reserva_inv</tag>
<status status="FAIL" start="2025-07-01T21:31:10.025224" elapsed="0.123471">BUG: API não valida payload corretamente - retorna 'Resource not found' em vez de 'Validation failed'</status>
</test>
<doc>Cenários de testes candidatos à automação para o módulo de "Reservations"</doc>
<status status="FAIL" start="2025-07-01T21:31:07.331218" elapsed="2.817866"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">criar_reserva_inv</stat>
</tag>
<suite>
<stat name="Reservations Tests" id="s1" pass="0" fail="1" skip="0">Reservations Tests</stat>
</suite>
</statistics>
<errors>
<msg time="2025-07-01T21:31:10.146171" level="WARN">BUG CONFIRMADO: API retorna 'Resource not found' em vez de validar payload</msg>
</errors>
</robot>
